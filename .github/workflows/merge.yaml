name: Merge
on:
  push:
    branches: [ master ]

jobs:

  golang-comments-service-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Test
        # Evidently we can't 'go test apps/comments-service/...' or the go tool will
        # search GOPATH instead of the module at apps/comments-service.
        run: cd apps/comments-service && go test -v ./...
  
  golang-comments-service-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Fetch golint
        run: |
          export GOBIN=$PWD/apps/comments-service/bin
          echo "GOBIN=$GOBIN" >> $GITHUB_ENV
          (cd apps/comments-service && go get golang.org/x/lint/golint)
      - name: Lint
        # Evidently we can't 'go test apps/comments-service/...' or the go tool will
        # search GOPATH instead of the module at apps/comments-service.
        run: (cd apps/comments-service && $GOBIN/golint -set_exit_status .)
  
  golang-generate-workflows-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Test
        # Evidently we can't 'go test scripts/generate-workflows/...' or the go tool will
        # search GOPATH instead of the module at scripts/generate-workflows.
        run: cd scripts/generate-workflows && go test -v ./...
  
  golang-generate-workflows-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Fetch golint
        run: |
          export GOBIN=$PWD/scripts/generate-workflows/bin
          echo "GOBIN=$GOBIN" >> $GITHUB_ENV
          (cd scripts/generate-workflows && go get golang.org/x/lint/golint)
      - name: Lint
        # Evidently we can't 'go test scripts/generate-workflows/...' or the go tool will
        # search GOPATH instead of the module at scripts/generate-workflows.
        run: (cd scripts/generate-workflows && $GOBIN/golint -set_exit_status .)
  
  terraformtarget-bootstrap-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init terraformtarget-bootstrap
        id: init-terraformtarget-bootstrap
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/bootstrap init
      - name: Terraform apply terraformtarget-bootstrap
        id: apply-terraformtarget-bootstrap
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/bootstrap apply -auto-approve
  
  terraformtarget-lambda-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init terraformtarget-lambda
        id: init-terraformtarget-lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/lambda init
      - name: Terraform apply terraformtarget-lambda
        id: apply-terraformtarget-lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/lambda apply -auto-approve
  
  terraformtarget-remote-state-test-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init terraformtarget-remote-state-test
        id: init-terraformtarget-remote-state-test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/remote-state-test init
      - name: Terraform apply terraformtarget-remote-state-test
        id: apply-terraformtarget-remote-state-test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/remote-state-test apply -auto-approve
  