#
# THIS DOCUMENT WAS AUTOGENERATED
#

name: Merge
on:
  push:
    branches: [master]
jobs:
  golang-comments-service-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Test
        run: (cd apps/comments-service && go test -v ./...)
  golang-comments-service-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Fetch golint
        run: |
          export GOBIN=$PWD/apps/comments-service/bin
          echo "GOBIN=$GOBIN" >> $GITHUB_ENV
          (cd apps/comments-service && go get golang.org/x/lint/golint)
      - name: Lint
        run: (cd apps/comments-service && $GOBIN/golint -set_exit_status ./...)
  golang-generate-workflows-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Test
        run: (cd scripts/generate-workflows && go test -v ./...)
  golang-generate-workflows-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Fetch golint
        run: |
          export GOBIN=$PWD/scripts/generate-workflows/bin
          echo "GOBIN=$GOBIN" >> $GITHUB_ENV
          (cd scripts/generate-workflows && go get golang.org/x/lint/golint)
      - name: Lint
        run: (cd scripts/generate-workflows && $GOBIN/golint -set_exit_status ./...)
  golanglambda-comments-service-s3publish:
    needs:
      - golang-comments-service-test
      - golang-comments-service-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Build binary
        run: |-
          set -eo pipefail
          cd apps/comments-service
          output="$PWD/golanglambda-comments-service-$(git rev-parse HEAD)"
          echo "output=$output" >> $GITHUB_ENV
          go build -o "$output"
      - name: Zip artifact
        run: echo "$output" && zip "${output}.zip" "$output"
      - name: Publish to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: us-east-2
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: aws --debug s3 cp "${output}.zip" "s3://weberc2-inf-lambda-code-artifacts/$(basename $output).zip"
  terraformtarget-bootstrap-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/bootstrap init
      - name: Terraform apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/bootstrap apply
  terraformtarget-lambda-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/lambda init
      - name: Terraform apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/lambda apply
  terraformtarget-prd-environment-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/prd-environment init
      - name: Terraform apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/prd-environment apply
  terraformtarget-remote-state-test-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/remote-state-test init
      - name: Terraform apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        run: terraform -chdir=targets/remote-state-test apply
